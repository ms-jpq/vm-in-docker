#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from multiprocessing import cpu_count
from os import chdir, environ, popen
from os.path import isfile, join
from shutil import get_terminal_size
from subprocess import PIPE, run
from sys import stderr
from typing import List, Tuple
from uuid import uuid4
from xml.dom import minidom


_install_dir_ = "install"
_drivers_ = join("drivers", "virtio-win.iso")
_vmdk_dir_ = "config"


def bold_print(message: str, sep="-") -> None:
  _, cols = get_terminal_size()
  print(sep * cols, file=stderr)
  print(message)
  print(sep * cols, file=stderr)


def spit(path: str, text: str) -> None:
  with open(path, "w") as fd:
    fd.write(text)


def parse() -> Namespace:
  parser = ArgumentParser()

  parser.add_argument("windows_img")

  parser.add_argument("-d", "--dry-run", action="store_true")
  parser.add_argument("-c", "--cpus", type=int, default=cpu_count())
  parser.add_argument("-m", "--memory", type=int, default=4000)
  parser.add_argument("-s", "--size", type=int, default=100)

  parser.add_argument("--vram", type=int, default=256)
  parser.add_argument("--bios", action="store_true", default=False)

  parser.add_argument("--os", default="win10")
  parser.add_argument("--extra", default="")

  return parser.parse_args()


def install(name, args: Namespace, vmdk: str) -> List[str]:
  cmds = [
      "virt-install",
      "--events", "on_crash=restart,on_reboot=restart,on_poweroff=destroy",
      "--virt-type", "kvm",
      "--os-variant", args.os,
      "--vcpus", f"{args.cpus},sockets=1",
      "--memory", f"{args.memory}",
      "--video", f"qxl,ram={args.vram * 1000}",
      "--graphics", "vnc,listen=0.0.0.0",
      "--cpu", "host-passthrough",
      "--controller", "type=scsi,model=virtio-scsi",
      "--disk", f"path={vmdk},size={args.size},format=raw,sparse=true,bus=scsi,discard=unmap",
      "--network", f"network={environ['NAT_NAME']},model=virtio",
      "--network", f"network={environ['MACVTAP_NAME']},model=virtio",
      "--disk", f"{_drivers_},device=cdrom",
      "--qemu-commandline=\"-uuid\"", f"--qemu-commandline={uuid4()}",
      "--name", name,
      "--check", "disk_size=off",
      "--cdrom", join(_install_dir_, args.windows_img),
      "--boot", *(["cdrom,hd"] if args.bios else ["uefi"]),
      *args.extra.split(),
      *(["--print-xml", "--dry-run"] if args.dry_run else []),
  ]
  return cmds


def main() -> None:
  chdir("/")
  print("\n" * 10)
  name = environ["VM_NAME"]
  try:
    args = parse()
    vmdk = join(_vmdk_dir_, f"{name}.img")
    vmrc = join(_vmdk_dir_, f"{name}.xml")
    if isfile(vmdk) or isfile(vmrc):
      print(f"ERROR :: {name} already exists!", file=stderr)
      exit(1)
    else:
      cmd = install(name, args, vmdk)
      run(cmd)
      if not args.dry_run:
        ret = run(["virsh", "dumpxml", name], stdout=PIPE)
        if ret.returncode != 0:
          bold_print("!! ERROR ^^^^")
        else:
          xml = ret.stdout.decode()
          spit(vmrc, xml)
          bold_print(xml)
          bold_print(f"Dumped libvirt config -- {vmrc}")
  except:
    raise
  finally:
    print("\n" * 10)


main()

